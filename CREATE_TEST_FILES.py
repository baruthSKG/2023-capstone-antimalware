# This script creates test files that will show up as infections during a scan
# Good for debugging etc

from easygui import *
import string
import random
import os
import sys
import sqlite3
import hashlib

NUMBER_OF_FILES = 5
GARBAGE_LEN = 1000

def getHashMD5(filename):
    md5_hash = hashlib.md5()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            md5_hash.update(byte_block)
        return md5_hash.hexdigest()
    f.close()

choice = buttonbox('','',('Create test files', 'Write infections to DB', 'Delete test records', 'Exit'))

if (choice == 'Create test files'):
    if not os.path.exists('__test'):
        os.makedirs('__test')
    for i in range(NUMBER_OF_FILES):
        garbage = ''.join(random.choices(string.ascii_uppercase + string.digits, k=GARBAGE_LEN))
        filepath = os.path.join(os.getcwd() + "/__test", "TEST_INFECTION_" + str(i+1))
        f = open(filepath, "w+")
        f.write(garbage)
        f.close()

if (choice == 'Write infections to DB'):
    test_infections = {}
    for file in os.listdir('__test'):
        if os.path.isfile(os.path.join('__test', file)):
            hash = getHashMD5(os.path.join('__test', file))
            print("Inserting into DB: " + os.path.join('__test', file) + " --> " + hash)
            test_infections[file] = hash
    print("Done")
    connection = sqlite3.connect("signature_based/HashDB.db")
    cursor = connection.cursor()
    for file, hash in test_infections.items():
        cursor.execute('INSERT INTO HashDB(name,hash) VALUES(?,?)', (file, hash,))
    connection.commit()
    connection.close()

if (choice == 'Delete test records'):
    connection = sqlite3.connect("signature_based/HashDB.db")
    cursor = connection.cursor()
    cursor.execute('DELETE FROM HashDB WHERE name LIKE "TEST_INFECTION_%"')
    connection.commit()
    connection.close()
    








