sys.path.insert(1, '../')
from ADD_SYS_PATHS import addSysPaths
addSysPaths()
import os
import shutil
import psutil
import traceback
from datetime import datetime
import pyuac # Requires pypiwin32

# Moves file, archives it, then removes original file
def quarantine(filepath):
    # Make folder to place files to archive
    archiveFolder = "toArchive"
    
    count = 1
    origFolder = archiveFolder
    while os.path.isdir(archiveFolder):
        archiveFolder = f"{origFolder} ({count})"
        count += 1
    
    os.mkdir(archiveFolder)
        
    # Make file name for archive
    storageFolder = "archivedFiles"
    try:
        os.mkdir(storageFolder) # Make folder if doesn't exist
    except:
        pass
    filename = storageFolder + "\\" + datetime.now().strftime("%m-%d-%Y %H-%M-%S")
    
    count = 1
    origFilename = filename
    while os.path.isfile(filename) or os.path.isfile(filename + ".zip"):
        filename = f"{origFilename} ({count})"
        count += 1
    
    # Move file
    attempts = 0
    max = 3
    while attempts < max:
        if os.path.isdir(filepath) or os.path.isfile(filepath):
            try:
                safeDelete(archiveFolder)
                os.mkdir(archiveFolder)
                shutil.move(filepath, archiveFolder)
            except PermissionError:
                print("File unable to be moved, attemping to free...")
                freeFile(filepath)
                attempts += 1
        else:
            break
        
    # Archive File if successfull
    if os.path.isdir(filepath) or os.path.isfile(filepath):
        print(f"Failed to quaratine {filepath}")
    else:
        shutil.make_archive(filename, "zip", archiveFolder)
    
    
    # Remove files
    safeDelete(archiveFolder)

def freeFile(filepath):
    for process in psutil.process_iter():
        try:
            # open_files seems to always raise an psutil.AccessDenied error
            # even when running in escalated privileges
            for file in process.open_files():
                if os.path.samefile(file.path, filepath):
                    print(f"Attempting to kill {process.name()}")
                    try:
                        process.kill()
                        print("Killed")
                    except:
                        print(f"Error killing process {process.name()}")
        except psutil.AccessDenied:
            pass

    print("File freed (probably)")
            

# Use this instead of shutil.rmtree (susceptible to symlink attack)
def safeDelete(filepath):
    failed = 0
    # Folder
    if os.path.isdir(filepath):
        files = os.listdir(filepath)
        # Delete files
        for file in files:
            if os.path.isfile(f"{filepath}\\{file}"):
                try:
                    os.remove(f"{filepath}\\{file}")
                except:
                    failed += 1
        # Delete folders
        for file in files:
            if os.path.isdir(f"{filepath}\\{file}"):
                safeDelete(f"{filepath}\\{file}")
        # Delete passed folder
        try:
            os.rmdir(filepath)
        except:
            failed += 1
    
    # File
    elif os.path.isfile(filepath):
        try:
            os.remove(file)
        except:
            failed += 1
    
    # Not Found
    else:
        print(f"{filepath} not found for deletion")
    
    if failed > 0:
        print(f"Failed to delete {failed} files/folders")
        
def main():
    file = input("Enter path of file/folder to archive: ")
    if os.path.isfile(file) or os.path.isdir(file):
        try:
            quarantine(file)
        except:
            traceback.print_exc()
    else:
        print("Invalid file!")
        
if __name__ == "__main__":
    if not pyuac.isUserAdmin():
        pyuac.runAsAdmin()
    else:
        main()
        input("Press enter to exit...")
