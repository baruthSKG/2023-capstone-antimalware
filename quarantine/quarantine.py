import sys
if __name__ == "__main__":
    sys.path.insert(1, '../')
    from ADD_SYS_PATHS import addSysPaths
    addSysPaths()
import os
import shutil
import psutil
import traceback
from datetime import datetime
import json
from time import gmtime, strftime
from logFunctions import errorLog

# Moves file, archives it, then removes original file
def quarantine(filepath, recordPath="../quarantine/quarantined.json", storageFolder="../quarantine/archivedFiles", textbox=None):
    filepath = os.path.abspath(filepath)
    if textbox != None:
            textbox.insert("end", f"Quarantining {filepath}\n")
    
    # Make folder to place files to archive
    archiveFolder = "toArchive"
    
    count = 1
    origFolder = archiveFolder
    while os.path.isdir(archiveFolder):
        archiveFolder = f"{origFolder} ({count})"
        count += 1
    
    os.mkdir(archiveFolder)
        
    # Make folder for storing archived files
    try:
        os.mkdir(storageFolder) # Make folder if doesn't exist
    except:
        pass
    filename = storageFolder + "\\" + datetime.now().strftime("%m-%d-%Y %H-%M-%S")
    
    count = 1
    origFilename = filename
    while os.path.isfile(filename) or os.path.isfile(filename + ".zip"):
        filename = f"{origFilename} ({count})"
        count += 1
    
    # Move file
    attempts = 0
    max = 3
    while attempts < max:
        if os.path.isdir(filepath) or os.path.isfile(filepath):
            try:
                safeDelete(archiveFolder)
                os.mkdir(archiveFolder)
                shutil.move(filepath, archiveFolder)
            except PermissionError:
                print("File unable to be moved, attemping to free...")
                freeFile(filepath)
                attempts += 1
        else:
            break
    
    success = False
    # Archive File if successful
    if os.path.isdir(filepath) or os.path.isfile(filepath):
        timestamp  = strftime("%m-%d-%Y %H %M %S", gmtime())
        errorLog(timestamp, filepath, "Failed to quarantine")
        
        if textbox != None:
            textbox.insert("end", f"Failed to quaratine {filepath}\n")
        print(f"Failed to quaratine {filepath}")
    else:
        shutil.make_archive(filename, "zip", archiveFolder)
        addRecord(filename + ".zip", filepath, recordPath)
        success = True
    
    
    # Remove files
    safeDelete(archiveFolder)
    
    return success

def freeFile(filepath):
    for process in psutil.process_iter():
        try:
            # open_files seems to always raise an psutil.AccessDenied error
            # even when running in escalated privileges
            for file in process.open_files():
                if os.path.samefile(file.path, filepath):
                    print(f"Attempting to kill {process.name()}")
                    try:
                        process.kill()
                        print("Killed")
                    except:
                        print(f"Error killing process {process.name()}")
        except psutil.AccessDenied:
            pass

    print("File freed (probably)")
            

# Use this instead of shutil.rmtree (susceptible to symlink attack)
def safeDelete(filepath):
    failed = 0
    # Folder
    if os.path.isdir(filepath):
        files = os.listdir(filepath)
        # Delete files
        for file in files:
            if os.path.isfile(f"{filepath}\\{file}"):
                try:
                    os.remove(f"{filepath}\\{file}")
                except:
                    failed += 1
        # Delete folders
        for file in files:
            if os.path.isdir(f"{filepath}\\{file}"):
                safeDelete(f"{filepath}\\{file}")
        # Delete passed folder
        try:
            os.rmdir(filepath)
        except:
            failed += 1
    
    # File
    elif os.path.isfile(filepath):
        try:
            os.remove(file)
        except:
            failed += 1
    
    # Not Found
    else:
        print(f"{filepath} not found for deletion")
    
    if failed > 0:
        print(f"Failed to delete {failed} files/folders")
        
def loadRecord(recordPath="../quarantine/quarantined.json"):
    if not os.path.isfile(recordPath):
        with open(recordPath, "w", encoding="utf-8") as recordFile:
            recordFile.write("{}")
            
    with open(recordPath, "r", encoding="utf-8") as recordFile:
        record = json.load(recordFile)
    return record

def saveRecord(record, recordPath="../quarantine/quarantined.json"):
    with open(recordPath, "w", encoding="utf-8") as recordFile:
            recordFile.write(json.dumps(record, indent=2))
        
def addRecord(filepath, origpath, recordPath="../quarantine/quarantined.json"):
    record = loadRecord(recordPath)
    filepath = os.path.abspath(filepath)
    origpath = os.path.abspath(origpath)
    
    if not filepath in record:
        record[filepath] = origpath
        saveRecord(record, recordPath)
    else:
        # Gotta add error log later
        print("Couldn't add quarantine record for: " + filepath)
            
def removeRecord(filepath, recordPath="../quarantine/quarantined.json"):
    record = loadRecord(recordPath)
    filepath = os.path.abspath(filepath)
            
    if filepath in record:
        del record[filepath]
        saveRecord(record, recordPath)

# Restore a quarantined file
# filepath is path of the quarantined .zip file
# Returns True on success and False on fail
def restore(filepath, recordPath="../quarantine/quarantined.json"):
    record = loadRecord(recordPath)
    filepath = os.path.abspath(filepath)
    
    try:
        dest = os.path.dirname(record[filepath])
        os.makedirs(dest, exist_ok=True)
        shutil.unpack_archive(filepath, dest)
        os.remove(filepath)
        removeRecord(filepath, recordPath)
    except:
        return False
    
    return True
        
        
if __name__ == "__main__":
    from infectionsGUI import infectionsGUI
    infectionsGUI()
