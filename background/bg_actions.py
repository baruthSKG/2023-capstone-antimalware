import sys
import os
sys.path.insert(1, '../')
from ADD_SYS_PATHS import addSysPaths
addSysPaths()

with open("bg_settings.ini", "r") as s:
    lines = s.readlines()
    if "BG_SCAN_ON = False\n" in lines:
        sys.exit()

import configparser
import datetime
from time import *

from signature_based import folderScan
from behavior_based import YARA_fileScan
from behavior_based import badNetworkConnections

config = configparser.ConfigParser()
config.read('bg_settings.ini')

class bgScan():
    def __init__(self):
        self.yara = bool(config['SETTINGS']['YARA'])
        self.netscan = bool(config['SETTINGS']['NETWORK'])
        self.folders = config['FOLDERS']['FLDRS'].split(",")
        if self.folders == [''] and __name__ == "__main__":
            sys.exit()
        self.folders_recursive = config['FOLDERS']['RECURSIVE']
        self.increments = config['INCREMENTS']['INCRM'].split(",")
        if self.increments == [''] and __name__ == "__main__":
            sys.exit()
        self.stripNewlines()
        self.init_time = datetime.datetime.now()
        if __name__ != "__main__" and self.increments == ['']:
            self.translations = None
        else:
            self.translations = self.translateIncrements()

    def stripNewlines(self):
        for f in self.folders:
            self.folders[self.folders.index(f)] = f.lstrip("\n")
        for i in self.increments:
            self.increments[self.increments.index(i)] = i.lstrip("\n")

    def translateIncrements(self):
        D_MAP = getDMAP("letter")
        T_MAP = {"A": "AM", "P": "PM"}
        translations = []
        for i in self.increments:
            day = D_MAP[i[0]]
            time = self.getTime(i)
            trinc = f"{day} at {time[0]} {time[1]}"
            translations.append(trinc)
        return translations

    def getTime(self, i):
        time = i.split("@")[1]
        if "A" in time:
            time = time.split("A")[0]
            ampm = "AM"
        else:
            time = time.split("P")[0]
            ampm = "PM"
        return (time, ampm)

def getDMAP(which):
        match(which):
            case "letter":
                return {"S": "Sunday", "M": "Monday", "T": "Tuesday",
                        "W": "Wednesday", "R": "Thursday", "F": "Friday",
                        "Z": "Saturday"
                        }
            case "int":
                return {0: "Sunday", 1: "Monday", 2: "Tuesday",
                        3: "Wednesday", 4: "Thursday", 5: "Friday",
                        6: "Saturday"
                        }

def scanScheduler():
    scan = bgScan()
    D_MAP = getDMAP("int")
    scanstarts = []
    for t in scan.translations:
        scanday = t.split(" ")[0]
        weekday = scan.init_time.strftime('%A')
        timelist = t.split(" ")[2]
        hm = timelist.split(":")
        if t.split(" ")[3] == "PM":
            hm[0] = str(int(hm[0]) + 12)
        remove_early_scans = int(f"{hm[0]}{hm[1]}") < int(f"{scan.init_time.hour}{scan.init_time.minute}")
        if weekday != scanday or remove_early_scans:
            scan.translations[scan.translations.index(t)] = None
        else:
            scanstarts.append((int(hm[0]), int(hm[1])))
           
    scan.translations = [i for i in scan.translations if i is not None]
            
    print("BONFIRE SECURITY BACKGROUND SCAN SCHEDULER")
    print(f"INITIALIZATION TIME: {scan.init_time}\n")
    
    if not scan.translations:
        exitMsg()
    else:
        printTranslations(scan)
        current_time = None
        while scanstarts:
            sleep(1)
            current_time = datetime.datetime.now()
            hour = current_time.hour
            minute = current_time.minute
            chm = (int(hour), int(minute))
            if (hour, minute) in scanstarts:
                scanHandler(scan)
                scanstarts.remove((hour, minute))
        exitMsg()

def scanHandler(scan):
    cwd = os.getcwd()
    results = {}
    timestamp = strftime("%m-%d-%Y %H %M %S", gmtime())
    print("\n\n")
    print("Starting scan!")
    if scan.yara:
        yara_paths = []
        os.chdir("../behavior_based")
        for folder in scan.folders:
            if scan.folders_recursive:
                for root, dirs, files in os.walk(folder):
                    for file in files:
                        yara_paths.append(os.path.join(root, file))
            else:
                for file in os.listdir(folder):
                    if os.path.isfile(folder+'\\'+file):
                        yara_paths.append(folder+'\\'+file)
        results['yara'] = YARA_fileScan([], yara_paths)
        os.chdir(cwd)
    if scan.netscan:
        os.chdir("../behavior_based")
        results['network scan'] = badNetworkConnections()
        os.chdir(cwd)
    if scan.folders:
        fr = []
        for folder_path in scan.folders:
            fr.append(folderScan(timestamp,folder_path))
        results['folder scan'] = fr
        os.chdir(cwd)
    print("\n\n")
    print("Scan results:")
    print("YARA -->")
    printResults(results, "yara")
    print("NETWORK -->")
    printResults(results, "network scan")
    print("FOLDER -->")
    printResults(results, "folder scan")

def printResults(results, matchtype):
    if results[matchtype] is not None and results[matchtype] != ["None"]:
        for match in results[matchtype]:
            print('\t' + str(match))
    else:
        print("\tNone")

def printTranslations(scan):
    print("Currently scheduled scans (Today):")
    for t in scan.translations:
        print(t) 
        
def exitMsg():
    t1 = time()
    print("No scans left!")
    print("Exiting in 5 seconds...")
    while True:
        t2 = time()
        if (t2 - t1) > 5:
            sys.exit()
             
def main():
    scanScheduler()
    
if __name__ == "__main__":
    main()
