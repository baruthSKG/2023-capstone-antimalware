from tkinter import *
import configparser
from easygui import diropenbox
from bg_actions import getDMAP, bgScan

def add_callback():
    D_MAP = getDMAP("letter")
    T_MAP = {0: 'A', 1: 'P'}
    entries = []
    trns = []
    for k, v in day_id.items():
        if v.get() == 1:
            dvi = getDMAP("int")[k]
            lvi = list(D_MAP.keys())[list(D_MAP.values()).index(dvi)]
            entry = ""
            entry += f"{lvi}@{str(h.get())}:{str(mi.get())}{T_MAP[ampm.get()]}"
            entries.append(entry)
    with open('bg_settings.ini', 'a') as f:
        for entry in entries:
            if incr == ['']:
                f.write(entry)
            else:
                f.write("," + entry)
            incr.append(entry)
            trns.append(translateIncrements(entry))
    for i, t in enumerate(trns):
        b.insert(len(trns)+i, t)

def del_callback():
    token = b.get(b.curselection())
    letter = list(getDMAP('letter'))[list(getDMAP('letter').values()).index(token.split(" ")[0])]
    tokenized = f"{letter}@{token.split('at ')[1].replace(' ', '')[:-1]}"
    b.delete(b.curselection())
    incr.remove(tokenized)
    with open('bg_settings.ini', 'r') as f:
        settings = f.readlines()
    setter = settings[len(settings)-1]
    setter = setter.replace(tokenized, "")
    if setter.endswith(","):
        setter = setter.rstrip(",")
    if " ," in setter:
        setter = setter.replace(" ,", "")
    settings[len(settings)-1] = setter
    with open('bg_settings.ini', 'w') as f:
        for s in settings:
            f.write(s)

def add_folder():
    diropen = diropenbox()
    if diropen is not None:
        with open('bg_settings.ini', 'r') as file:
            settings = file.readlines()
        for line in settings:
            if line.startswith("FLDRS = "):
                tmp = settings[settings.index(line)]
                if foldr == ['']:
                    tmp = f"FLDRS = {diropen}\n"
                else:
                    tmp = tmp.strip()
                    tmp += f", {diropen}\n"
                settings[settings.index(line)] = tmp
        with open('bg_settings.ini', 'w') as file:
            for line in settings:
                file.write(line)
        foldr.append(diropen)
        f.insert(len(foldr)-1, diropen)

def del_folder():
    ddir = f.get(f.curselection())
    f.delete(f.curselection())
    with open('bg_settings.ini', 'r') as file:
        settings = file.readlines()
    for i, line in enumerate(settings):
        if line.startswith("FLDRS = "):
            idx = i
            break
    setter = settings[idx].split("FLDRS = ")[1]
    setter = setter.split(",")
    written = []
    for s in setter:
        s = s.strip()
        s = s.rstrip("\n")
        if s != ddir:
            written.append(s)
    txt = "FLDRS = "
    for i, w in enumerate(written):
        txt += w
        if i != len(written)-1:
            txt += ", "
    txt += "\n"
        
    settings[idx] = txt
    with open('bg_settings.ini', 'w') as file:
        for s in settings:
            file.write(s)
            
def translateIncrements(entry):
    D_MAP = getDMAP("letter")
    T_MAP = {"A": "AM", "P": "PM"}
    day = D_MAP[entry[0]]
    time = [entry.split("@")[1].split(":")[0], entry.split("@")[1].split(":")[1]]
    trinc = f"{day} at {time[0]}:{time[1]}M"
    return trinc

def get_options():
    options = {"bg": "BG_SCAN_ON = ", "yara": "YARA = ", "net": "NETWORK = ", "rec": "RECURSIVE = "}
    options_get = []
    
    if op_id[0].get() == 1:
        options["bg"] += "True\n"
    else:
        options["bg"] += "False\n"
    if op_id[1].get() == 1:
        options["yara"] += "True\n"
    else:
        options["yara"] += "False\n"
    if op_id[2].get() == 1:
        options["net"] += "True\n"
    else:
        options["net"] += "False\n"
    if op_id[3].get() == 1:
        options["rec"] += "True\n"
    else:
        options["rec"] += "False\n"

    for v in options.values():
        options_get.append(v)
    with open('bg_settings.ini', 'r') as file:
        settings = file.readlines()
    for i, s in enumerate(settings):
        for o in options_get:
            if s.startswith(o.split(" ")[0]):
                settings[i] = o
    with open('bg_settings.ini', 'w') as file:
        for s in settings:
            file.write(s)
            
scan = bgScan()
options = ["Turn on/off", "YARA scan", "Network scan", "Recursive folder scan"]

m = Tk()
m.title('Schedule Manager')
m.minsize(400, 600)
rel = 35
relx = 2
dt = Label(m, text="Days")
dt.place(x=2, y=2)
ot = Label(m, text="Options")
ot.place(x=200, y=2)
otrel = rel
op_id = {0: IntVar(), 1: IntVar(), 2: IntVar(), 3: IntVar()}
D_MAP = getDMAP("int")
day_id = {0: IntVar(), 1: IntVar(), 2: IntVar(), 3: IntVar(), 4: IntVar(), 5: IntVar(), 6: IntVar()}
for i, day in enumerate(D_MAP.values()):
    days = Checkbutton(m, text=day, variable=day_id[i])
    days.place(x=2, y=rel)
    rel += 20
for i, option in enumerate(options):
    op = Checkbutton(m, text=option, variable=op_id[i])
    op.place(x=200, y=otrel)
    otrel += 20
bu1 = Button(text="Save", command=get_options)
bu1.place(x=200, y=otrel+20)
ampm = IntVar()
rel += 35
h = Spinbox(m, from_ = 1, to = 12, width=2)
mi = Spinbox(m, from_ = 0, to = 59, width=4, format='%02.0f')
am = Radiobutton(m, text='A.M.', variable=ampm, value=0)
pm = Radiobutton(m, text='P.M.', variable=ampm, value=1)
co = Label(m, text=':')
tt = Label(m, text="Time")
tt.place(x=2, y=rel)
rel += 35
h.place(x=2, y=rel)
co.place(x=30, y=rel)
mi.place(x=40, y=rel)
am.place(x=80, y=rel)
pm.place(x=130, y=rel)
rel += 25
bu1 = Button(text="Add", command=add_callback)
bu1.place(x=2, y=rel)
rel += 55
ft = Label(m, text="Folders")
ft.place(x=2, y=rel)
rel += 20
f = Listbox()
foldr = scan.folders
if foldr != ['']:
    for i, fo in enumerate(foldr):
        f.insert(i, fo.lstrip(" "))
f.place(x=2, y=rel)
buf1 = Button(text="Add", command=add_folder)
buf1.place(x=2, y=rel+170)
buf2 = Button(text="Delete", command=del_folder)
buf2.place(x=40, y=rel+170)
st = Label(m, text="Scans")
rel -= 20
st.place(x=200, y=rel)
rel += 20
incr = scan.increments
trns = scan.translations
b = Listbox()
if incr != ['']:
    for i, time in enumerate(trns):
        b.insert(i, time)
b.place(x=200, y=rel)
bu2 = Button(text="Delete", command=del_callback)
bu2.place(x=200, y=rel+170)
m.mainloop()
