import ctypes
import zlib
import os
import glob
import pathlib
import sqlite3
import shutil
from urllib.request import urlretrieve

def compareHashDB_SQLite(file_hash):
    # Open SQLite database
    connection = sqlite3.connect(os.getcwd() + '/../signature_based/HashDB.db')
    cursor = connection.cursor()
    databases = ['HashDB'] # in case we need multiple databases
    for db in databases:
        cursor.execute('SELECT name FROM ' + db + ' WHERE hash=?', (file_hash,))
    output = cursor.fetchone()
    if (output != None):
        for row in output:
            return row
    else:
        return "No infections found!"
        
    connection.commit()
    connection.close()

# Data from https://bazaar.abuse.ch/export/ (csv, full data dump)
def compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash):
    # Get file if doesn't exist
    if not os.path.isfile("../signature_based/full.csv"):
        urlretrieve("https://bazaar.abuse.ch/export/csv/full", "full.zip")
        shutil.unpack_archive("full.zip", "../signature_based")
        os.remove("full.zip")

    # Read and trim file
    df = pd.read_csv('full.csv', skiprows=8, quotechar='"', skipinitialspace = True, keep_default_na=False, na_values=None)
    df.drop(df.tail(1).index, inplace=True)
    
    # Get results that match any passed hash
    query = f"sha256_hash == '{sha256_hash}' or "
    query += f"md5_hash == '{md5_hash}' or "
    query += f"sha1_hash == '{sha1_hash}'"
    results = df.query(query)
    
    # Return result (if returning "n/a", a match was found with no name)
    if len(results) > 0:
        return results['signature'].iloc[0]
    else:
        return "No infections found!"

def checkDBs(md5_hash, sha256_hash, sha1_hash):
            result = "No infections found!"
            if (compareHashDB_SQLite(md5_hash) != result):
                result = compareHashDB_SQLite(md5_hash)
            #if (compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash) != result):
            #    result = compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash)
            return result
