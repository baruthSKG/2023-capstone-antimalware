dependencies = ['hashlib','zlib','os','glob','pathlib','tkinter','easygui','sqlite3', 'shutil', 'psutil', 'traceback', 'datetime', 'pandas']

import sys
sys.path.insert(1, '../')
from INSTALL_DEPENDENCIES import installDependencies
installDependencies(dependencies)
sys.path.insert(1, '../quarantine')
from quarantine import *
sys.path.insert(1, '../logging')
from logFunctions import writeScanLog

import hashlib
import zlib
import os
import glob
import pathlib
from tkinter import filedialog
from easygui import *
import sqlite3
import string
import pandas as pd

cwd = os.getcwd() # need this to chdir back into the directory with HashDB.db, otherwise it won't be able to find it, HashDB.db should ALWAYS be in the same directory as this file

def getHashMD5(filename):
    md5_hash = hashlib.md5()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            md5_hash.update(byte_block)
        return md5_hash.hexdigest()
    f.close()

def getHashCRC32(filename):
    prev = 0
    for line in open(filename,"rb"):
        prev = zlib.crc32(line, prev)
    crc32_hash = "%X"%(prev & 0xFFFFFFFF)
    return crc32_hash
    rb.close()

def getHashSHA1(filename):
    sha1_hash = hashlib.sha1()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha1_hash.update(byte_block)
        return sha1_hash.hexdigest()
   

def getHashSHA256(filename):
    sha256_hash = hashlib.sha256()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()

def getHashSHA384(filename):
    sha384_hash = hashlib.sha384()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha384_hash.update(byte_block)
        return sha384_hash.hexdigest()

def getHashSHA512(filename):
    sha512_hash = hashlib.sha512()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha512_hash.update(byte_block)
        return sha512_hash.hexdigest()

def getDrives():
    drives = ['%s:/' % d for d in string.ascii_uppercase if os.path.exists('%s:' % d)]
    return drives
       
def compareHashDB_SQLite(file_hash):
    # Open SQLite database
    connection = sqlite3.connect(cwd + '/HashDB.db')
    cursor = connection.cursor()
    databases = ['HashDB'] # in case we need multiple databases
    for db in databases:
        cursor.execute('SELECT name FROM ' + db + ' WHERE hash=?', (file_hash,))
    output = cursor.fetchone()
    if (output != None):
        for row in output:
            return row
    else:
        return "No infections found!"
        
    connection.commit()
    connection.close()
    
# Data from https://bazaar.abuse.ch/export/ (csv, full data dump)
def compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash):
    # Read and trim file
    df = pd.read_csv('full.csv', skiprows=8, quotechar='"', skipinitialspace = True, keep_default_na=False, na_values=None)
    df.drop(df.tail(1).index)
    
    # Get results that match any passed hash
    query = f"sha256_hash == '{sha256_hash}' or "
    query += f"md5_hash == '{md5_hash}' or "
    query += f"sha1_hash == '{sha1_hash}'"
    results = df.query(query)
    
    # Return result (if returning "n/a", a match was found with no name)
    if len(results) > 0:
        return results['signature'].iloc[0]
    else:
        return "No infections found!"

def fileScan(win_output):
    #this code is a mess, might rewrite later
    found_infections = {}
    filenames = []
    errors = []
    
    #File and Folder Scans
    if (win_output.upper() != 'FULL SYSTEM SCAN'):
        if (win_output.upper() == 'FILE SCAN'):
            filenames = fileopenbox(multiple=True)
        if (win_output.upper() == 'FOLDER SCAN'):
            sf_bl = []
            sfc_state = 0
            b1 = "Yes"
            b2 = "No"
            sf_bl.append(b1)
            sf_bl.append(b2)
            sub_folder_scan = buttonbox("Scan subfolders?", "Capstone Antimalware", sf_bl) 
            if (sub_folder_scan == "Yes"):
                sfc_state = 1
            folder_selected = filedialog.askdirectory()
            os.chdir('C:/')
            
            if (sfc_state == 0):
                files_in_folder = glob.glob(folder_selected + '/*')
                for item in files_in_folder:
                    if(os.path.isfile(item)):
                        filenames.append(item)
                        try:
                            md5_hash = getHashMD5(item)
                            sha1_hash = getHashSHA1(item)
                            sha256_hash = getHashSHA256(item)
                            filenames.append(item)
                            # Running these twice is a bit slow, not sure how to fix easily without nested if-else
                            if (compareHashDB_SQLite(md5_hash) != "No infections found!"):
                                found_infections[item] = compareHashDB_SQLite(md5_hash)
                            elif (compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash) != "No infections found!"):
                                found_infections[item] = compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash)
                        except:
                            print(f"FAILED TO OPEN FILE:{abs_file} Try running with admin priviledges?")
                            errors.append(abs_file)
            
            else:
                for (root,dirs,files) in os.walk(folder_selected, topdown=True):
                    for item in files:
                        abs_file = os.path.join(root, item)
                        print(abs_file)
                        if(os.path.isfile(abs_file)):
                            print("Scanning: " + abs_file)
                            try:
                                md5_hash = getHashMD5(abs_file)
                                sha1_hash = getHashSHA1(item)
                                sha256_hash = getHashSHA256(item)
                                filenames.append(abs_file)
                                # Running these twice is a bit slow, not sure how to fix easily without nested if-else
                                if (compareHashDB_SQLite(md5_hash) != "No infections found!"):
                                    found_infections[abs_file] = compareHashDB_SQLite(md5_hash)
                                elif (compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash) != "No infections found!"):
                                    found_infections[item] = compareMalwareBazaar(sha256_hash, md5_hash, sha1_hash)
                            except:
                                print(f"FAILED TO OPEN FILE:{abs_file} Try running with admin priviledges?")
                                errors.append(abs_file)

                
    # Full System Scan
    elif (win_output.upper() == 'FULL SYSTEM SCAN'):
        drives = getDrives()
        for drive in drives:
            os.chdir(drive)
            for (root,dirs,files) in os.walk('.', topdown=True):
                c_d = os.getcwd()
                for item in files:
                    abs_file = os.path.join(root, item)
                    if(os.path.isfile(abs_file)):
                        print("Scanning: " + abs_file)
                        try:
                            file_hash = getHashMD5(abs_file)
                            filenames.append(abs_file)
                            if (compareHashDB_SQLite(file_hash) != "No infections found!"):
                                found_infections[file] = compareHashDB_SQLite(file_hash)
                        except:
                            print(f"FAILED TO OPEN FILE:{abs_file} Try running with admin priviledges?")
                            errors.append(abs_file)
                
    actions = scanResultsAndActions(found_infections)
    writeScanLog(found_infections,filenames,actions,errors)

#Takes from the user and returns a list of actions taken for each infection
def scanResultsAndActions(found_infections):
    inf_actions = []
    print("\nFOUND INFECTIONS:")
    if found_infections == {}:
        print("No infections found!") 
    else:
        confirm = 0
        app_check = 0
        while (confirm != 999):
            count = 0
            actions = ['Delete', 'Keep', 'Quarantine']
            for key in found_infections:
                if (app_check == 0):
                    inf_actions.append(actions[0])
                print('[', count, ']', '[', inf_actions[count], ']', found_infections[key], '<--', key)
                count = count + 1
            
            print("\n")
            print("ACTIONS:")
            print("-------------------")
            print("[1] Delete All | [2] Delete One/Multiple | [3] Keep All | [4] Keep One/Multiple | [5] Quarantine All | [6] Quarantine One/Multiple")
            print("\n")
            print("[999] Confirm")
            print("\n")
            confirm = input("Choice --> ")
            confirm = int(confirm)
            app_check = 1
            if (confirm % 2 != 0):
                count = 0
                for inf in inf_actions:
                    if (confirm == 1):
                        inf_actions[count] = actions[0]
                    elif (confirm == 3):
                        inf_actions[count] = actions[1]
                    elif (confirm == 5):
                        inf_actions[count] = actions[2]
                    count += 1
            elif (confirm % 2 == 0):
                if (confirm == 2):
                    mult_keyword = "delete"
                elif (confirm == 4):
                    mult_keyword = "keep"
                elif (confirm == 6):
                    mult_keyword = "quarantine"
                print("Enter one or multiple files to", mult_keyword)
                print("(Multiple files separated by comma --> Ex. 1,3,5,7)")
                print("-1 to exit")
                print("\n")
                if (confirm == -1):
                    pass
                else:
                    tmp_list_choice = []
                    tmp_list_choice = input("Choice --> ")
                    tmp_list = tmp_list_choice.split(',')
                    tmp_list = [eval(i) for i in tmp_list]
                    count = 0
                    i = 0
                    for inf in inf_actions:
                        # ??????? This only works with a try/else statement and I don't know why        
                        try:
                            if (count == tmp_list[i]):
                                if (confirm == 2):
                                    inf_actions[count] = actions[0]
                                elif (confirm == 4):
                                    inf_actions[count] = actions[1]
                                elif (confirm == 6):
                                    inf_actions[count] = actions[2]
                                i = i + 1
                            count = count + 1
                        except:
                            pass 
        count = 0
        for key in found_infections:
            if (inf_actions[count] == 'Delete'):
                print("Deleting infection", found_infections[key], "--> (", key, ")")
                os.chdir('C:/')
                if os.path.exists(key):
                  os.remove(key)
            elif (inf_actions[count] == 'Quarantine'):
                print("Quarantining infection", found_infections[key], "--> (", key, ")")
                quarantine(key)
            elif (inf_actions[count] == 'Keep'):
                print("Keeping infection", found_infections[key], "--> (", key, ")")
            count += 1
            
    return inf_actions
        
            
def dbTests():
    file_hash = '38c07fde8a4d0c51ed48a80ee0931b62'
    assert(compareHashDB_SQLite(file_hash) == "Trojan.JS.Cryxos")
    file_hash = '320e465e96fac3eaecbc63ea78ac70f6'
    assert(compareHashDB_SQLite(file_hash) == "W32/Emotet.AWL.gen!Eldorado")
    file_hash = "2533c4d575099795fd7a86f5a37ce3511573c23f06bb22a6dfcc60e9490ccadb" #SHA256
    assert(compareMalwareBazaar(file_hash, "", "") == "QuasarRAT")
    file_hash = "d8f2cb03278f0f90ed77bf974ac1f81b" #MD5
    assert(compareMalwareBazaar("", file_hash, "") == "Gafgyt")
    file_hash = "2de743345cf42ba0e92c02240c58625e7aeb45a3" #SHA1
    assert(compareMalwareBazaar("", "", file_hash) == "n/a") # Some entries in MalwareBazaar don't have names associated
    file_hash = "Fake hash"
    assert(compareMalwareBazaar(file_hash, file_hash, file_hash) == "No infections found!")
    assert(compareMalwareBazaar("", "", "") == "No infections found!")
    
def main():
    #dbTests()
    win_title = "Capstone Antimalware"
    win_text = "Get started by scanning specific files, a folder, or the entire system.\n\nWARNING: Files that require admin rights or are in use by the system might not be scanned!"
    button_list = []
    sf_button = "File Scan"
    fs_button = "Folder Scan"
    fsc_button = "Full System Scan"
    button_list.append(sf_button)
    button_list.append(fs_button)
    button_list.append(fsc_button)
    win_output = (buttonbox(win_text, win_title, button_list))
    fileScan(win_output)

main()
