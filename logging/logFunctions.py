import sys
sys.path.insert(1, '../')
from ADD_SYS_PATHS import addSysPaths
addSysPaths()
from datetime import *
import os
import customtkinter as ct

path = os.getcwd()
os.makedirs(path + "\..\__logs", exist_ok=True)

#Logs a scanned file for a given timestamp and filepath
def scanLog(timestamp, filepath):
    entry = f"SCANNED FILE: {filepath}\n"
    if not os.path.exists(path + f"\..\__logs\{timestamp}"):
        os.makedirs(path + f"\..\__logs\{timestamp}", exist_ok=True)
    
    with open(path + f"\..\__logs\{timestamp}\ScanLogs.txt","a") as logFile:
        logFile.write(entry)

#Logs a found infection, filepath, and action taken for a given timestamp
def infectionLog(timestamp,filepath,infection_name,action):
    entry = f"INFECTION FOUND IN FILE:{filepath} - {infection_name} ACTION:{action}\n"
    if not os.path.exists(path + f"\..\__logs\{timestamp}"):
        os.makedirs(path + f"\..\__logs\{timestamp}")
    
    with open(path + f"\..\__logs\{timestamp}\InfectionLogs.txt","a") as logFile:
        logFile.write(entry)
    
#Logs an error for a given timestamp
def errorLog(timestamp,filepath,error):
    entry = f"ERROR:{filepath} - {error}\n"
    if not os.path.exists(path + f"\..\__logs\{timestamp}"):
        os.makedirs(path + f"\..\__logs\{timestamp}")
    
    with open(path + f"\..\__logs\{timestamp}\ErrorLogs.txt","a") as logFile:
        logFile.write(entry)

#Opens a new window that shows all logs in a scrollable frame
def viewLogs():
    #--------------------------Log GUI-----------------------------------------------------|
    ct.set_appearance_mode("dark")
    ct.set_default_color_theme("dark-blue")
    root = ct.CTk()
    root.geometry("800x800")
    root.title("Logs")
    frame = ct.CTkScrollableFrame(master=root, width=800, height=800)
    frame.pack(pady=5, padx=5, fill="both", expand=True)
    textbox = ct.CTkTextbox(root, width=800, height = 800)
    textbox.insert("0.0","test\n")

    logs = os.listdir(path + "\..\__logs")
    for log in logs:
        log_path = path + "\..\__logs\\" + log
        textbox.insert("end", log, "\n")
        print(log + "\n")
        #Infections Found
        if os.path.exists(log_path + "\InfectionLogs.txt"):
            textbox.configure(state="normal")
            with open(log_path + "\InfectionLogs.txt") as infections_file:
                infections = infections_file.readlines()
                print(f"=====Infections Found({len()})=====\n")
                textbox.insert("end", f"=====Infections Found({len(infections)})=====\n")
                textbox.insert("end", infections)
                """
                for infectionLog in infections:
                    print(f"\t{infectionLog}\n")
                """
            textbox.update_idletasks()
            
        #Files Scanned
        if os.path.exists(log_path + "\ScanLogs.txt"):
            textbox.configure(state="normal")
            textbox.update_idletasks()
            textbox.configure(state="disabled")
            with open(log_path + "\ScanLogs.txt") as scanned_file:
                scanned = scanned_file.readlines()
                print(f"=====Files Scanned({len(scanned)})=====\n")
                textbox.insert("end", f"=====Files Scanned({len(scanned)})=====\n")
                textbox.insert("end", scanned)
                """
                for scanLog in scanned:
                    print(f"\t{scanLog}\n")
                """
                    
        #Errors
        if os.path.exists(log_path + "\ErrorLogs.txt"):
            textbox.configure(state="normal")
            textbox.update_idletasks()
            textbox.configure(state="disabled")
            with open(log_path + "\ErrorLogs.txt") as errors_file:
                errors = errors_file.readlines()
                print(f"=====Errors({len(errors)})=====\n")
                textbox.insert("end", "=====Errors({len(errors)})=====\n")
                textbox.insert("end", errors)
                """
                for errorLog in errors:
                    print(f"\t{errorLog}\n")
                """

    root.protocol("WM_DELETE_WINDOW", exit)
    root.mainloop()
    #-------------------------------------------------------------------------------------|
    
if __name__ == "__main__":
    viewLogs()