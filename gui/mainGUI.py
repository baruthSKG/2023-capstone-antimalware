import sys
import os
sys.path.insert(1, '../')
from ADD_SYS_PATHS import addSysPaths
addSysPaths()
import customtkinter as ct
from tkinter import filedialog
from pathlib import Path
from time import gmtime, strftime
from tkinter import ttk  
from logFunctions import viewLogs

def GUI():
    yara_rules = Path("../yara_rules").glob('*')
    from signature_based import fullSystemScan #multi-threaded
    from signature_based import fileScan
    from signature_based import folderScan
    from signature_based import exitProgram
    from signature_based import add_to_whitelist
    from signature_based import whitelisted_files
    from behavior_based import getPIDs #multi-threaded
    from behavior_based import YARA_PIDScan
    from infectionsGUI import infectionsGUI
    from behavior_based import badNetworkConnections
    
    def clearOutputAction():
        textbox.configure(state="normal")
        textbox.delete("1.0", "end")
        text = "System Output: \n" 
        textbox.insert("0.0", text)
        textbox.configure(state="disabled")
        
    def viewLogAction():
        logs = viewLogs() 
        log_window = ct.CTk()
        log_window.geometry("800x600")
        log_window.title("View Logs")

        log_textbox = ct.CTkTextbox(log_window, width=1475, height=600)
        log_textbox.pack(pady=(10, 0))  

        log_textbox.insert("1.0", logs)

        log_window.mainloop()
    
    def fileScanAction():
        file_path = filedialog.askopenfilename()  #File Scan action

        if file_path in whitelisted_files:
            textbox.configure(state="normal")
            textbox.insert("end", f"'{file_path}' is whitelisted and will not be scanned.\n")
            textbox.update_idletasks()
            textbox.configure(state="disabled")

        if file_path:
            timestamp = strftime("%m-%d-%Y %H %M %S", gmtime())
            fileScan(timestamp,file_path,0,textbox=textbox)

    def folderScanAction():
        folder_path = filedialog.askdirectory()  #Folder Scan action

        if folder_path in whitelisted_files:
            textbox.configure(state="normal")
            textbox.insert("end", f"'{file_path}' is whitelisted and will not be scanned.\n")
            textbox.update_idletasks()
            textbox.configure(state="disabled")

        if folder_path:
            timestamp = strftime("%m-%d-%Y %H %M %S", gmtime())
            folderScan(timestamp,folder_path,textbox=textbox)

    def fullSystemScanAction():
        textbox.configure(state="normal")
        textbox.insert("end", "Starting a full system scan...\n")
        textbox.update_idletasks()
        textbox.configure(state="disabled")
        timestamp = strftime("%m-%d-%Y %H %M %S", gmtime())
        fullSystemScan(timestamp,textbox=textbox)
        #print(f"SCANNING --> {file_path}")
        
        

    def addToWhitelistAction():
        file_path = filedialog.askopenfilename()
        if file_path:
            add_to_whitelist(file_path)
            textbox.insert("end", f"'{file_path}' has been whitelisted and will not be scanned. \n")

    def processID_Action():
        textbox.configure(state="normal")
        textbox.insert("end", "Checking against Yara database...\n")
        textbox.update_idletasks()
        textbox.configure(state="disabled")

        matches = YARA_PIDScan(yara_rules)
        if matches:
            textbox.insert("end", "Match found!\n")
            for match in matches:
                textbox.insert("end", match, "\n")
        else:
            textbox.insert("end", "No matches found.\n")
            
    def yaraScanAction():
        textbox.configure(state="normal")
        textbox.insert("end", "Checking against Yara database...\n")
        textbox.update_idletasks()

        matches = YARA_fileScan(yara_rules, None)
        if matches:
            textbox.insert("end", "Match found!\n")

            for match in matches:
                textbox.insert("end", match, "\n")
        else:
            textbox.insert("end", "No matches found.\n")

        textbox.configure(state="disabled")

    def badNetworkConnections_Action():
        textbox.configure(state="normal")
        textbox.insert("end", "Scanning for malicious network connections...\n")
        textbox.update_idletasks()

        cwd = os.getcwd()
        os.chdir(f"{cwd}\\..\\behavior_based")
        bad_connections = badNetworkConnections()
        os.chdir(cwd)
        if bad_connections:
            textbox.insert("end", f"{len(bad_connections)} bad connections found!\n")
            for c in bad_connections:
                textbox.insert("end", c, "\n")
        else:
            textbox.insert("end", "No bad connections found.\n")

    def schedulerAction():
        cwd = os.getcwd()
        os.chdir(f"{cwd}\\..\\background")
        os.system('schedulerGUI.py')
        os.chdir(cwd)

    def infectionsAction():
        infectionsGUI(textbox=textbox)

    def exit():
        root.destroy()
        
    
    
   #|--------------------Signature Based/Main GUI--------------------|
    ct.set_appearance_mode("dark")
    ct.set_default_color_theme("dark-blue")
    root = ct.CTk()
    root.geometry("1600x600")
    root.title("Bonfire Security")

    # Top Frame
    top_frame = ct.CTkFrame(master=root)
    top_frame.pack(pady=10, padx=60, fill="both", expand=True)

    labelOne = ct.CTkLabel(master=top_frame, text="Get started by scanning specific files, a folder, or the entire system.")
    labelTwo = ct.CTkLabel(master=top_frame, text="WARNING: Files that require admin rights or are in use by the system might not be scanned!")
    labelOne.pack(pady=12, padx=10)
    labelTwo.pack(pady=12, padx=10)

    entry = ct.CTkEntry(master=top_frame, placeholder_text="File path to scan:")
    entry.pack(pady=12, padx=10)

    # Top row of buttons
    top_button_frame = ct.CTkFrame(master=top_frame)
    top_button_frame.pack(pady=5, padx=10)

    fileScanButton = ct.CTkButton(master=top_button_frame, text="File Scan", command=fileScanAction)
    fileScanButton.pack(side="left", pady=12, padx=10)

    folderScanButton = ct.CTkButton(master=top_button_frame, text="Folder Scan", command=folderScanAction)
    folderScanButton.pack(side="left", pady=12, padx=10)

    systemScanButton = ct.CTkButton(master=top_button_frame, text="Full System Scan", command=fullSystemScanAction)
    systemScanButton.pack(side="left", pady=12, padx=10)

    yaraScan = ct.CTkButton(master=top_button_frame, text="Scan System using Yara rules", command=yaraScanAction)
    yaraScan.pack(side="left", pady=12, padx=10)

    BNC = ct.CTkButton(master=top_button_frame, text="Network Scan", command=badNetworkConnections_Action)
    BNC.pack(side="left", pady=12, padx=10)

    scheduler = ct.CTkButton(master=top_button_frame, text="Background Scan Scheduler", command=schedulerAction)
    scheduler.pack(side="left", pady=12, padx=10)

    # Textbox
    textbox = ct.CTkTextbox(root, width=1475, height=200)
    text = "System Output: \n" #, logFileName #this needs to be looked at
    textbox.insert("0.0", text)
    textbox.pack(pady=(0, 10))  # Adjusted padding here

    # Bottom row of buttons (Moved to the top frame)
    bottom_button_frame = ct.CTkFrame(master=top_frame)
    bottom_button_frame.pack(pady=12, padx=10)

    viewLogButton = ct.CTkButton(master=bottom_button_frame, text="View Logs", command=viewLogAction)
    viewLogButton.pack(side="left", pady=12, padx=10)

    addToWhitelistButton = ct.CTkButton(master=bottom_button_frame, text="Add to Whitelist", command=addToWhitelistAction)
    addToWhitelistButton.pack(side="left", pady=12, padx=10)

    processIDbutton = ct.CTkButton(master=bottom_button_frame, text="Get all Process IDs", command=processID_Action)
    processIDbutton.pack(side="left", pady=12, padx=10)

    infectionsButton = ct.CTkButton(master=bottom_button_frame, text="Quarantine and Restore Files", command=infectionsAction)
    infectionsButton.pack(side="left", pady=12, padx=10)

    clearOutput = ct.CTkButton(master=bottom_button_frame, text="Clear System Output", command=clearOutputAction)
    clearOutput.pack(side="left", pady=12, padx=10)
    
    exitButton = ct.CTkButton(master=bottom_button_frame, text="Exit", command=exit)
    exitButton.pack(side="left", pady=12, padx=10)

    root.protocol("WM_DELETE_WINDOW", exit)
    root.mainloop()
    #|--------------------------------------------------|

    
    
    
    
if __name__ == "__main__":
    GUI()

