import sys
sys.path.insert(1, '../')
from ADD_SYS_PATHS import addSysPaths
addSysPaths()
import customtkinter as ct
from tkinter import filedialog
from pathlib import Path
from time import gmtime, strftime

def GUI():
    yara_rules = Path("../yara_rules").glob('*')
    from signature_based import fullSystemScan #multi-threaded
    from signature_based import fileScan
    from signature_based import folderScan
    from signature_based import exitProgram
    from signature_based import add_to_whitelist
    from signature_based import whitelisted_files
    from behavior_based import getPIDs #multi-threaded
    from behavior_based import YARA_PIDScan
    from logFunctions import writeScanLog #grabs log file
    
    
    #|--------------------Signature Based/Main GUI--------------------|
    ct.set_appearance_mode("dark")
    ct.set_default_color_theme("dark-blue")
    root = ct.CTk()
    root.geometry("1300x600")
    root.title("Bonfire Security")
    frame = ct.CTkFrame(master=root)
    frame.pack(pady=20, padx=60, fill="both", expand=True)

    labelOne = ct.CTkLabel(master=frame, text="Get started by scanning specific files, a folder, or the entire system.")
    labelTwo = ct.CTkLabel(master=frame, text="WARNING: Files that require admin rights or are in use by the system might not be scanned!")
    labelOne.pack(pady=12, padx=10)
    labelTwo.pack(pady=12, padx=10)
    
    entry = ct.CTkEntry(master=frame, placeholder_text="File path to scan:")
    entry.pack(pady=12, padx=10)

    def fileScanPath(event=None):
        file_path = entry.get()
        if os.path.exists(file_path):
            fileScan(file_path)
        else:
            textbox.configure(state="normal")
            textbox.insert("end", "Invalid file path. Please enter a valid path. \n")
            textbox.update_idletasks()
            textbox.configure(state="disabled")

    def fileScanAction():
        file_path = filedialog.askopenfilename()  #File Scan action
        
        if file_path in whitelisted_files:
            textbox.configure(state="normal")
            textbox.insert("end", f"'{file_path}' is whitelisted and will not be scanned.\n")
            textbox.update_idletasks()
            textbox.configure(state="disabled")
        
        if file_path:
            fileScan(file_path)
    def folderScanAction():
        folder_path = filedialog.askdirectory()  #Folder Scan action
        
        if folder_path in whitelisted_files:
            textbox.configure(state="normal")
            textbox.insert("end", f"'{file_path}' is whitelisted and will not be scanned.\n")
            textbox.update_idletasks()
            textbox.configure(state="disabled")
        
                    
        if folder_path:
            folderScan(folder_path)
        
    def fullSystemScanAction():                  #Full System Scan action
        textbox.configure(state="normal")
        textbox.insert("end", "Starting a full system scan...\n")
        textbox.update_idletasks()
        textbox.configure(state="disabled")
        fullSystemScan()
    
    def addToWhitelistAction():
        file_path = filedialog.askopenfilename()
        if file_path:
            add_to_whitelist(file_path)
            
            textbox.insert("end", f"'{file_path}' has been whitelisted and will not be scanned. \n")
    
    def processID_Action():
        textbox.configure(state="normal")
        textbox.insert("end", "Checking against Yara database...\n")
        textbox.update_idletasks()
        textbox.configure(state="disabled")

        matches = YARA_PIDScan(yara_rules)
        if matches:
            textbox.insert("end", "Match found!\n")
            for match in matches:
                textbox.insert("end", match, "\n")
        else:
            textbox.insert("end", "No matches found.\n")
            
        #getPIDs()
        
    def yaraScanAction():
        textbox.configure(state="normal")
        textbox.insert("end", "Checking against Yara database...\n")
        textbox.update_idletasks()
        
        
        matches = YARA_fileScan(yara_rules)
        if matches:
            textbox.insert("end", "Match found!\n")
            
            for match in matches:
                textbox.insert("end", match, "\n")
        else:
            textbox.insert("end", "No matches found.\n")
        
        textbox.configure(state="disabled")
        
        
    entry.bind("<Return>", fileScanPath)
    
    #Log system textbox
    textbox = ct.CTkTextbox(root, width=1300, height = 300)
    text = "System Output: \n" #, logFileName #this needs to be looked at
    textbox.insert("0.0", text)
    #textbox.configure(state="disabled")
    textbox.pack(side = "left")
    
    
    #File Scan Button
    fileScanButton = ct.CTkButton(master=frame, text="File Scan", command=fileScanAction)
    fileScanButton.pack(side = "left", pady=12, padx=10)
    
    #folder scan button
    folderScanButton = ct.CTkButton(master=frame, text="Folder Scan", command=folderScanAction)
    folderScanButton.pack(side = "left", pady=12, padx=10)
    
    #full system scan button
    systemScanButton = ct.CTkButton(master=frame, text="Full System Scan", command=fullSystemScanAction)
    runningLabel = ct.CTkLabel(master=frame, text="scanning all files...")
    systemScanButton.pack(side = "left", pady=12, padx=10)
    
    #Whitelist button
    addToWhitelistButton = ct.CTkButton(master=frame, text="Add to Whitelist", command=addToWhitelistAction)
    addToWhitelistButton.pack(side = "left", pady=12, padx=10)

    #get process ID button
    processIDbutton = ct.CTkButton(master=frame, text="Get all Process IDs", command=processID_Action)
    processIDbutton.pack(side = "left", pady=12, padx=10)

    #YARA_fileScan
    yaraScan = ct.CTkButton(master=frame, text="Scan System using Yara rules", command=processID_Action)
    yaraScan.pack(side = "left", pady=12, padx=10)

    #exit button
    exitButton = ct.CTkButton(master=frame, text="Exit", command=exitProgram)
    exitButton.pack(side = "left", pady=12, padx=10)

    root.mainloop()
    #|--------------------------------------------------|
    
    
