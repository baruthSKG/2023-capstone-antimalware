import hashlib
import pip
import zlib
import os
import glob
from tkinter import filedialog
#Should install easygui and sqlite3 if not found, should probably fix if it doesn't work
try:
    __import__('easygui')
except ImportError:
    pip.main(['install', 'easygui'])
from easygui import *
try:
    __import__('sqlite3')
except ImportError:
    pip.main(['install', 'sqlite3'])
import sqlite3

def getHashMD5(filename):
    # Get MD5 hash from user-submitted file
    md5_hash = hashlib.md5()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            md5_hash.update(byte_block)
        return md5_hash.hexdigest()
    f.close()

def getHashCRC32(filename):
    # Get CRC32 hash from user-submitted file
    prev = 0
    for line in open(filename,"rb"):
        prev = zlib.crc32(line, prev)
    crc32_hash = "%X"%(prev & 0xFFFFFFFF)
    return crc32_hash
    rb.close()

def getHashSHA1(filename):
    # Get SHA1 hash from user-submitted file
    sha1_hash = hashlib.sha1()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha1_hash.update(byte_block)
        return sha1_hash.hexdigest()
    f.close()
   

def getHashSHA256(filename):
    # Get SHA256 hash from user-submitted file
    sha256_hash = hashlib.sha256()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    f.close()

def getHashSHA384(filename):
    # Get SHA384 hash from user-submitted file
    sha384_hash = hashlib.sha384()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha384_hash.update(byte_block)
        return sha384_hash.hexdigest()
    f.close()

def getHashSHA512(filename):
    # Get SHA512 hash from user-submitted file
    sha512_hash = hashlib.sha512()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha512_hash.update(byte_block)
        return sha512_hash.hexdigest()
    f.close()
    
    
def compareHashDB_SQLite(file_hash):
    # Open SQLite database
    connection = sqlite3.connect('HashDB.db')
    cursor = connection.cursor()

    db = 'HashDB'
    
    cursor.execute('SELECT name FROM HashDB WHERE hash=(?)', (file_hash,))
    output = cursor.fetchone()
    if (output != None):
        for row in output:
            return row
    else:
        return "No infections found!"
        
    connection.commit()
    connection.close()

def fileScan(win_output):
    #IDK IF THIS SHIT ACTUALLY WORKS AS INTENDED, CAN SOMEONE TEST PLZ
    
    cwd = os.getcwd() # need this to chdir back into the directory with HashDB.db, otherwise it won't be able to find it
    found_infections = {}
    filenames = []
    if (win_output == 'Scan files'):
        filenames = fileopenbox(multiple=True)
    if (win_output == 'Folder scan'):
        folder_selected = filedialog.askdirectory()
        folder_selected = folder_selected + '/*'
        os.chdir('C:/')
        files_in_folder = glob.glob(folder_selected)
        for item in files_in_folder:
            filenames.append(item)
    os.chdir(cwd)
    for item in filenames:
        print("Scanning: ", item)
        file_hash = getHashMD5(item)
        if (compareHashDB_SQLite(file_hash) != "No infections found!"):
            found_infections[item] = compareHashDB_SQLite(file_hash)     
    print("\nFOUND INFECTIONS:")
    if not found_infections:
        print("No infections found!")
    else:
        for key in found_infections:
            print(key, found_infections[key])
    
def dbTests():
    file_hash = '38c07fde8a4d0c51ed48a80ee0931b62'
    assert(compareHashDB_SQLite(file_hash) == "Trojan.JS.Cryxos")
    file_hash = '320e465e96fac3eaecbc63ea78ac70f6'
    assert(compareHashDB_SQLite(file_hash) == "W32/Emotet.AWL.gen!Eldorado")

def main():
    dbTests()
    win_title = "Capstone Antimalware"
    win_text = "Get started by scanning specific files or an entire folder.\n\nWARNING: Files that require admin rights to access might crash the program!"
    button_list = []
    mf_button = "Scan files"
    sc_button = "Folder scan"
    button_list.append(mf_button)
    button_list.append(sc_button)
    win_output = (buttonbox(win_text, win_title, button_list))
    fileScan(win_output)

main()

# Some TODO suggestions:
# ----------------------
# Concatenate separate hash functions into one function
# Implement support for other databases other than SQLite
# Implement support for multiple malware hash databases
# Convert to C++
# De-hardcode database name in compareHashDB_SQLite() function
# Find a way to give this program admin privileges so it won't error out when scanning files that require those rights
# Full recursive system scan
