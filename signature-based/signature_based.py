dependencies = ['hashlib','zlib','os','glob','pathlib','tkinter','easygui','sqlite3']

import pip
for item in dependencies:
    try:
        __import__(item)
    except ImportError:
        print("Installing dependency --> ", item) 
        pip.main(['install', item])
import hashlib
import zlib
import os
import glob
import pathlib
from tkinter import filedialog
from easygui import *
import sqlite3

cwd = os.getcwd() # need this to chdir back into the directory with HashDB.db, otherwise it won't be able to find it, HashDB.db should ALWAYS be in the same directory as this file

def getHashMD5(filename):
    md5_hash = hashlib.md5()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            md5_hash.update(byte_block)
        return md5_hash.hexdigest()
    f.close()

def getHashCRC32(filename):
    prev = 0
    for line in open(filename,"rb"):
        prev = zlib.crc32(line, prev)
    crc32_hash = "%X"%(prev & 0xFFFFFFFF)
    return crc32_hash
    rb.close()

def getHashSHA1(filename):
    sha1_hash = hashlib.sha1()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha1_hash.update(byte_block)
        return sha1_hash.hexdigest()
    f.close()
   

def getHashSHA256(filename):
    sha256_hash = hashlib.sha256()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    f.close()

def getHashSHA384(filename):
    sha384_hash = hashlib.sha384()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha384_hash.update(byte_block)
        return sha384_hash.hexdigest()
    f.close()

def getHashSHA512(filename):
    sha512_hash = hashlib.sha512()
    with open(filename,"rb") as f:
        for byte_block in iter(lambda: f.read(4096),b""):
            sha512_hash.update(byte_block)
        return sha512_hash.hexdigest()
    f.close()
       
def compareHashDB_SQLite(file_hash):
    # Open SQLite database
    connection = sqlite3.connect(cwd + '/HashDB.db')
    cursor = connection.cursor()
    databases = ['HashDB'] # in case we need multiple databases
    for db in databases:
        cursor.execute('SELECT name FROM ' + db + ' WHERE hash=?', (file_hash,))
    output = cursor.fetchone()
    if (output != None):
        for row in output:
            return row
    else:
        return "No infections found!"
        
    connection.commit()
    connection.close()

def fileScan(win_output):    
    found_infections = {}
    filenames = []
    if (win_output.upper() != 'FULL SYSTEM SCAN'):
        if (win_output.upper() == 'FILE SCAN'):
                filenames = fileopenbox(multiple=True)
        if (win_output.upper() == 'FOLDER SCAN'):
            folder_selected = filedialog.askdirectory()
            folder_selected = folder_selected + '/*'
            os.chdir('C:/')
            files_in_folder = glob.glob(folder_selected)
            for item in files_in_folder:
                filenames.append(item)
            
        for file in filenames:
            print("Scanning: ", file)
            try:
                file_hash = getHashMD5(file)
                if (compareHashDB_SQLite(file_hash) != "No infections found!"):
                    found_infections[file] = compareHashDB_SQLite(file_hash)
            except:
                print("FAILED TO OPEN FILE! Try running with admin priviledges?")

    if (win_output.upper() == 'FULL SYSTEM SCAN'):
        os.chdir('C:/')
        for (root,dirs,files) in os.walk('.', topdown=True):
            c_d = os.getcwd()
            for item in files:
                abs_file = os.path.join(root, item)
                print("Scanning: " + abs_file)
                try:
                    file_hash = getHashMD5(abs_file)
                    if (compareHashDB_SQLite(file_hash) != "No infections found!"):
                        found_infections[file] = compareHashDB_SQLite(file_hash)
                except:
                    print("FAILED TO OPEN FILE! Try running with admin priviledges?")
                    
    print("\nFOUND INFECTIONS:")
    if not found_infections:
        print("No infections found!")
    else:
        for key in found_infections:
            print('[', key, '] -->', found_infections[key])
    
def dbTests():
    file_hash = '38c07fde8a4d0c51ed48a80ee0931b62'
    assert(compareHashDB_SQLite(file_hash) == "Trojan.JS.Cryxos")
    file_hash = '320e465e96fac3eaecbc63ea78ac70f6'
    assert(compareHashDB_SQLite(file_hash) == "W32/Emotet.AWL.gen!Eldorado")

def main():
    dbTests()
    win_title = "Capstone Antimalware"
    win_text = "Get started by scanning specific files, a folder, or the entire system.\n\nWARNING: Files that require admin rights might not be scanned!"
    button_list = []
    sf_button = "File Scan"
    fs_button = "Folder Scan"
    fsc_button = "Full System Scan"
    button_list.append(sf_button)
    button_list.append(fs_button)
    button_list.append(fsc_button)
    win_output = (buttonbox(win_text, win_title, button_list))
    fileScan(win_output)

main()

# Some TODO suggestions:
# ----------------------
# Concatenate separate hash functions into one function
# Implement support for other databases other than SQLite
# Implement support for multiple malware hash databases
# Convert to C++
# Mult-core support for Full-System Scan since it takes fucking ages
# Option to scan sub-folders in Folder Scan (currently only scans parent folder)
# De-hardcode button names being passed to fileScan()
# Re-code File Scan and Folder Scan to be similar to Full-System Scan (getting rid of the filenames[] appends and doing it moreso on-the-fly)
# Find way to scan files that are currently being used by system (Errno 13)
# Linux support?

# I have verified that the fileScan() function works as intended by adding test files to HashDB.db

