import sys
import os
from pathlib import Path
sys.path.insert(1, '../')
# This is a weird problem with INSTALL_DEPENDENCIES.py where you have to install 'yara-python' but import 'yara'
from INSTALL_DEPENDENCIES import installDependencies
try:
    __import__('yara')
except ImportError:
    installDependencies(['yara-python'])
import yara
import string
import psutil
from easygui import *

#Gets Process IDs of every process running on system
def getPIDs():
    pids = {
        proc.info["pid"]: proc.info["name"]
        for proc in psutil.process_iter(attrs=["pid","name"])
    }
    return pids

class getCallbackData():
    #This and setCallbackData() only get the rule if the file is a match
    stored_data = None
    def YARA_callback(data):
        stored_data = data['rule']
        setCallbackData(stored_data)
        return yara.CALLBACK_CONTINUE

def setCallbackData(stored_data):
    getCallbackData.stored_data = stored_data

def YARA_PIDScan(yara_rules):
    #This doesn't actually do anything yet since permission denied error
    matches = []
    pids = getPIDs()
    for c_pid in pids:
        print("Analyzing ", pids[c_pid], "[", c_pid, "]")
        for rule_f in yara_rules:
            ext = str(rule_f).rsplit('.', 1)
            if (ext[1] == "yar" or ext[1] == "yara"):
                fh = open(rule_f)
                rules = yara.compile(file=fh)
                fh.close()
                try:
                    rules.match(pid = c_pid, callback = getCallbackData.YARA_callback, which_callbacks = yara.CALLBACK_MATCHES)
                    if (getCallbackData.stored_data != None):
                        matches.append(getCallbackData.stored_data)
                        setCallbackData(None)
                except:
                    pass
            else:
                pass
                
    return matches
        
def YARA_fileScan(yara_rules):
    matches = []
    filenames = fileopenbox(multiple=True)
    for file in filenames:
        print("Analyzing ", file)
        for rule_f in yara_rules:
            ext = str(rule_f).rsplit('.', 1)
            if (ext[1] == "yar" or ext[1] == "yara"):
                fh = open(rule_f)
                rules = yara.compile(file=fh)
                fh.close()
                with open(file, 'rb') as f:
                    rules.match(data = f.read(), callback = getCallbackData.YARA_callback, which_callbacks = yara.CALLBACK_MATCHES)
                    if (getCallbackData.stored_data != None):
                        matches.append(getCallbackData.stored_data)
                        setCallbackData(None)
                f.close()
            else:
                pass
            
    return matches

def YARA_analyze():
    yara_rules = Path("../yara_rules").glob('*')
    win_text = "YARA Behavior-based"
    win_title = "Capstone Antimalware"
    button_list = []
    fs_button = "File Scan"
    pid_button = "PID scan"
    button_list.append(fs_button)
    button_list.append(pid_button)
    win_output = (buttonbox(win_text, win_title, button_list))
    print("Checking against Yara database...")
    if (win_output.upper() == 'FILE SCAN'):
        matches = YARA_fileScan(yara_rules)
    elif (win_output.upper() == 'PID SCAN'):
        matches = YARA_PIDScan(yara_rules)
    if matches:
        print("Match found!")
        for match in matches:
            print(match)
    else:
        print("No matches found.")

YARA_analyze()
    
