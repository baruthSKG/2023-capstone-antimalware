import sys
import os
from pathlib import Path
sys.path.insert(1, '../')
# This is a weird problem with INSTALL_DEPENDENCIES.py where you have to install 'yara-python' but import 'yara'
from INSTALL_DEPENDENCIES import installDependencies
try:
    __import__('yara')
except ImportError:
    installDependencies(['yara-python'])
import yara
import string
import psutil
#from easygui import *
import concurrent.futures

#Gets Process IDs of every process running on system

def getPIDs():
    def get_pid_info(proc):
        return proc.info["pid"], proc.info["name"]

    with concurrent.futures.ThreadPoolExecutor() as executor:
        pids = dict(executor.map(get_pid_info, psutil.process_iter(attrs=["pid", "name"])))

    return pids

class getCallbackData():
    #This and setCallbackData() only get the rule if the file is a match
    stored_data = None
    def YARA_callback(data):
        stored_data = data['rule']
        setCallbackData(stored_data)
        return yara.CALLBACK_CONTINUE

def setCallbackData(stored_data):
    getCallbackData.stored_data = stored_data

def YARA_PIDScan(yara_rules):
    def analyze_pid(c_pid):
        print("Analyzing ", pids[c_pid], "[", c_pid, "]")
        matches = []
        for rule_f in yara_rules:
            ext = str(rule_f).rsplit('.', 1)
            if ext[1] in ("yar", "yara"):
                fh = open(rule_f)
                rules = yara.compile(file=fh)
                fh.close()
                try:
                    rules.match(pid=c_pid, callback=getCallbackData.YARA_callback, which_callbacks=yara.CALLBACK_MATCHES)
                    if getCallbackData.stored_data is not None:
                        matches.append(getCallbackData.stored_data)
                        setCallbackData(None)
                except Exception as e:
                    print(f"Error analyzing {pids[c_pid]} [{c_pid}]: {e}")
        return matches

    matches = []
    pids = getPIDs()

    with concurrent.futures.ThreadPoolExecutor() as executor:
        # Use executor.map to process the analyze_pid function for each process in parallel
        results = executor.map(analyze_pid, pids.keys())
        for result in results:
            matches.extend(result)

    return matches
        
def YARA_fileScan(yara_rules):
    matches = []
    filenames = fileopenbox(multiple=True)
    for file in filenames:
        print("Analyzing ", file)
        for rule_f in yara_rules:
            ext = str(rule_f).rsplit('.', 1)
            if (ext[1] == "yar" or ext[1] == "yara"):
                fh = open(rule_f)
                rules = yara.compile(file=fh)
                fh.close()
                with open(file, 'rb') as f:
                    rules.match(data = f.read(), callback = getCallbackData.YARA_callback, which_callbacks = yara.CALLBACK_MATCHES)
                    if (getCallbackData.stored_data != None):
                        matches.append(getCallbackData.stored_data)
                        setCallbackData(None)
                f.close()
            else:
                pass
            
    return matches


